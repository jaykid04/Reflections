What happens when you initialize a repository? Why do you need to do it?

	When repository is initialized it is created, a repository is needed to track all 
	all changes made in a program for future reference.
	
How is the staging area different from the working directory and the repository?
What value do you think it offers?
	
	Its the middle man between the repository and the working directory the working directory.
	houses all the files including the repository, the repository collects all the files added
	from the working directory.
	
How can you use the staging area to make sure you have one commit per logical
change?

	The staging area lists all the files that have changed since the last commit so if more than one file is listed then there is more than 1 logical change.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	When the user would like to add a new feature or make a different version from the master. The branches would keep the overall project organized.

How do the diagrams help you visualize the branch structure?

	It helps keep track of all changes made or added to the made and brings organization to a complex set of changes that may occur.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	This command combines all commits from both branches into the master
	branch. The diagram makes it easier to follow the changes a program tree has gone through over time.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

	The pro's of automatic merging is that it prevents human error while merging which could create more problems after merging also while merging of different collaborations of a project it will automatically detect any conflicts within the merging program. The con's to auto merging are while merging two branches git won't know what to keep and what to discard and this works out well for manually merging a program.